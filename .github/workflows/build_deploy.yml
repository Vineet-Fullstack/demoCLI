name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'  # Trigger on tags like v1.0.0, v2.0.0, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      tag_name:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: QA  # Specify the environment (e.g., QA)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'  # Adjust to your target .NET version

      - name: Restore dependencies
        run: dotnet restore

      - name: Build the project
        run: dotnet build --configuration Release

      - name: Pack the project
        run: dotnet pack --configuration Release --output ./nupkgs

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}  # Reference the secret from the QA environment
        run: dotnet nuget push ./nupkgs/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json

  build-release-assets:
    runs-on: ubuntu-latest
    needs: build-and-publish  # Wait for the build-and-publish job to complete
    strategy:
      matrix:
        platform: [win-x64, linux-x64, osx-x64]  # Target platforms
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET 8 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Build for ${{ matrix.platform }}
        run: dotnet publish -c Release -r ${{ matrix.platform }} -o ./publish/${{ matrix.platform }}

      - name: Zip binaries
        run: |
          cd ./publish/${{ matrix.platform }}
          zip -r ../${{ matrix.platform }}.zip .
          cd ../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: ./publish/${{ matrix.platform }}.zip

  create-release:
    runs-on: ubuntu-latest
    needs: build-release-assets  # Wait for the build-release-assets job to complete
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}  # Use input or tag name
          release_name: Release ${{ github.event.inputs.tag_name || github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/win-x64/win-x64.zip
          asset_name: win-x64.zip
          asset_content_type: application/zip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-x64/linux-x64.zip
          asset_name: linux-x64.zip
          asset_content_type: application/zip

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/osx-x64/osx-x64.zip
          asset_name: osx-x64.zip
          asset_content_type: application/zip